#include <iostream>
#include <stack>
using namespace std;
class treenode
{
    int data;
    treenode* left;
    treenode* right;
    friend class tree;
};
class tree
{
    treenode* root;
public:
    tree();
    ~tree(); // Destructor to free memory
    void create_nr();
    void create_r();
    void create_r(treenode* temp);
    void inorder_r();
    void inorder_r(treenode* temp);
    void preorder_r();
    void preorder_r(treenode* temp);
    void postorder_r();
    void postorder_r(treenode* temp);
    void inorder_nr();
    void preorder_nr();
    void postorder_nr();
};
tree::tree()
{
    root = nullptr;
}
tree::~tree()
{
// Implement code to delete nodes in postorder manner
}
void tree::create_nr()
{
    if (root == nullptr) {
        root = new treenode();
        int data;
        cout << "Enter data into the root node: ";
        cin >> data;
        root->data = data;
        root->left = nullptr;
        root->right = nullptr;
    }
    char choice = 'y';
    do {
        treenode* temp = root;
        int flag = 0;
        treenode* curr = new treenode();
        int data;
        cout << "Enter data of node: ";
        cin >> data;
        curr->data = data;
        curr->left = nullptr;
        curr->right = nullptr;
        while (flag == 0) {
            char c;
            cout << "Enter node to left or right of " << temp->data << "? (l or r)" << endl;
            cin >> c;
            if (c == 'l') {
                if (temp->left == nullptr) {
                    temp->left = curr;
                    flag = 1;
                }
                temp = temp->left;
            } else {
                if (temp->right == nullptr) {
                    temp->right = curr;
                    flag = 1;
                }
                temp = temp->right;
            }
        }
        cout << "Add more nodes? (y/n): ";
        cin >> choice;
    } while (choice == 'y');
}
void tree::create_r()
{
    root = new treenode();
    cout << "Enter data for the root: ";
    cin >> root->data;
    create_r(root);
}
void tree::create_r(treenode* temp)
{
    char choice;
    cout << "Add data to the left of " << temp->data << "? (y/n): ";
    cin >> choice;
    if (choice == 'y') {
        treenode* curr = new treenode();
        cout << "Enter data for the left child of " << temp->data << ": ";
        cin >> curr->data;
// Attach the new node as the left child of temp
        temp->left = curr;
// Recursively create the left subtree
        create_r(curr);
    }
    cout << "Add data to the right of " << temp->data << "? (y/n): ";
    cin >> choice;
    if (choice == 'y') {
        treenode* curr = new treenode();
        cout << "Enter data for the right child of " << temp->data << ": ";
        cin >> curr->data;
        temp->right = curr;
        create_r(curr);
    }
}
void tree::inorder_r()
{
    inorder_r(root);
}
void tree::inorder_r(treenode* temp)
{
    if (temp != nullptr) {
        inorder_r(temp->left);
        cout << temp->data << " ";
        inorder_r(temp->right);
    }
}
void tree::preorder_r()
{
    preorder_r(root);
}
void tree::preorder_r(treenode* temp)
{
    if (temp != nullptr) {
        cout << temp->data << " ";
        preorder_r(temp->left);
        preorder_r(temp->right);
    }
}
void tree::postorder_r()
{
    postorder_r(root);
}
void tree::postorder_r(treenode* temp)
{
    if (temp != nullptr) {
        postorder_r(temp->left);
        postorder_r(temp->right);
        cout << temp->data << " ";
    }
}
void tree::inorder_nr()
{
    stack<treenode*> nodestack;
    treenode* curr = root;
    while (curr != nullptr || !nodestack.empty()) {
        while (curr != nullptr) {
            nodestack.push(curr);
            curr = curr->left;
        }
        curr = nodestack.top();
        nodestack.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
}
void tree::preorder_nr()
{
    if (root == nullptr)
        return;
    stack<treenode*> nodestack;
    nodestack.push(root);
    while (!nodestack.empty()) {
        treenode* curr = nodestack.top();
        nodestack.pop();
        cout << curr->data << " ";
        if (curr->right != nullptr)
            nodestack.push(curr->right);
        if (curr->left != nullptr)
            nodestack.push(curr->left);

        void tree::postorder_nr() {
            if (root == nullptr)
                return;
            stack<treenode*> s1, s2;
            s1.push(root);
            while (!s1.empty()) {
                treenode* curr = s1.top();
                s1.pop();
                s2.push(curr);
                if (curr->left != nullptr)
                    s1.push(curr->left);
                if (curr->right != nullptr)
                    s1.push(curr->right);
            }
            while (!s2.empty()) {
                cout << s2.top()->data << " ";
                s2.pop();
            }
        }
        int main() {
            tree bt;
            int ch;
            cout<<"Select the option from choices below: ";
            do {
                cout << "\n1. Creation nonrecursive\n";
                cout << "2. Creation recursive\n";
                cout << "3. Inorder recursive traversal\n";
                cout << "4. Preorder recursive traversal\n";
                cout << "5. Postorder recursive traversal\n";
                cout << "6. Inorder nonrecursive traversal\n";
                cout << "7. Preorder nonrecursive traversal\n";
                cout << "8. Postorder nonrecursive traversal\n";
                cout << "9. Exit\n";
                cout << "Enter your choice (1-9): ";
                cin >> ch;
                switch (ch) {
                case 1:
                    cout << "\nNonrecursive creation\n";
                    bt.create_nr();
                    break;
                case 2:
                    cout << "\nRecursive Creation: \n";
                    bt.create_r();
                    break;
                case 3:
                    cout << "\nRecursive Inorder Traversal: \n";
                    bt.inorder_r();
                    break;
                case 4:
                    cout << "\nRecursive Preorder traversal:\n";
                    bt.preorder_r();
                    break;
                case 5:
                    cout << "\nRecursive Postorder traversal:\n";
                    bt.postorder_r();
                    break;
                case 6:
                    cout << "Inorder nonrecursive traversal:\n";
                    bt.inorder_nr();
                    break;
                case 7:
                    cout << "Preorder nonrecursive traversal:\n";
                    bt.preorder_nr();
                    break;
                case 8:
                    cout << "Postorder nonrecursive traversal:\n";
                    bt.postorder_nr();
                    break;
                case 9:
                    cout << "Exiting the program.\n";
                    break;
                default:
                    cout << "Select another option.\n";
                    break;
                }
            } while (ch != 9);
            return 0;
        }
